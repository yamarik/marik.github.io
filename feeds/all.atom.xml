<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Programming Blog</title><link href="https://yamarik.github.io/" rel="alternate"></link><link href="https://yamarik.github.io/feeds/all.atom.xml" rel="self"></link><id>https://yamarik.github.io/</id><updated>2023-11-20T18:53:00-05:00</updated><subtitle>Programming Blog</subtitle><entry><title>Make a Github Pages blog with Pelican</title><link href="https://yamarik.github.io/make-github-pages-blog-with-pelican.html" rel="alternate"></link><published>2023-11-20T18:53:00-05:00</published><updated>2023-11-20T18:53:00-05:00</updated><author><name>Olga Maraeva</name></author><id>tag:yamarik.github.io,2023-11-20:/make-github-pages-blog-with-pelican.html</id><summary type="html">&lt;h3&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;In project’s folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can inslall Pelican with Sinaptic package manager (recommended). &lt;/p&gt;
&lt;p&gt;Create a new folder for your project and open a console in it. Let's create default Simple theme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;During the pelican-quickstart process you need to say "yes":&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you want to …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h3&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;In project’s folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can inslall Pelican with Sinaptic package manager (recommended). &lt;/p&gt;
&lt;p&gt;Create a new folder for your project and open a console in it. Let's create default Simple theme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;During the pelican-quickstart process you need to say "yes":&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you want to upload your website using Github Pages? Say “y”&lt;/p&gt;
&lt;p&gt;Do you want to automate site generation and publication? Say "y"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you answered “yes” to second question, a &lt;strong&gt;tasks.py&lt;/strong&gt; and &lt;strong&gt;Makefile&lt;/strong&gt; will be generated in the root of your project. These files  should be customized to fit your particular needs and usage patterns. Using them you can easily view and publish your site.&lt;/p&gt;
&lt;h3&gt;Creating blog content in Markdown&lt;/h3&gt;
&lt;p&gt;Open your favorite text editor (in my case vi) and navigate to project's root folder. Let's create the folder for our content: static pages and blog posts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir content
cd content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create first post: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vi your-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can add static pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir pages
cd pages
vi about.md
vi contacts.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All files have metadata:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: title of your page/post.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;: 2023-02-26&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt;: Linux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slug&lt;/strong&gt;: your page/post URL.Ex: https://yamarik.github.io/linux-disk-backup-using-clonezilla.html. Here slug is: linux-disk-backup-using-clonezilla  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's time to view our Simple Theme. Navigate to project's root folder and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This step create &lt;strong&gt;OUTPUT&lt;/strong&gt; folder  with  site files in root of your project. This command also tell Pelican to watch for your modifications, instead of manually re-running it every time you want to see your changes. In Linux it simultaneously both auto-regenerate and serve the output at http://127.0.0.1:8000/ or  http://localhost:8000 (depends on your theme settings).&lt;/p&gt;
&lt;h3&gt;Change default Simple theme&lt;/h3&gt;
&lt;h4&gt;Choose your theme&lt;/h4&gt;
&lt;p&gt;You can find pelican themes &lt;a href="https://pelicanthemes.com/"&gt;here&lt;/a&gt; or &lt;a href="https://github.com/getpelican/pelican-themes"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Clone your  theme.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/alexandrevicenzi/Flex.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Downolad theme.zip, unpack it and copy in your project's root folder. Here run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-themes -i Flex-master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Verify the installation&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-themes --list –verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s the path to your new theme&lt;/p&gt;
&lt;h4&gt;Configure blog to use new theme&lt;/h4&gt;
&lt;p&gt;For this, just open your pelicanconf.py available in your root folder(not in theFlex-master folder!) and define the path to your new theme by adding the following statement at the end of pelicanconf.py file:&lt;/p&gt;
&lt;p&gt;THEME = '/usr/lib/python3/dist-packages/pelican/themes/Flex-master'&lt;/p&gt;
&lt;h3&gt;Rebuild and run the site locally&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It wil generate OUTPUT folder in your project with static site pages. It also tell Pelican to watch for your modifications, instead of manually re-running it every time you want to see your changes.&lt;/p&gt;
&lt;p&gt;Go to &lt;strong&gt;http://127.0.0.1:8000&lt;/strong&gt; or &lt;strong&gt;http://localhost:8000/&lt;/strong&gt; in your browser to view your blog. If you want to stop development server run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Ctrl+C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But now you still can't see all theme features. In project's root folder find Makefile, open it in your favorit editor and put correct paths to theme's content, output folder and settings. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;BASEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CURDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;INPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/Flex-master/docs/content
&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/Flex-master/output
&lt;span class="nv"&gt;CONFFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/Flex-master/docs/pelicanconf.py
&lt;span class="nv"&gt;PUBLISHCONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/Flex-master/docs/publishconf.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then in project's root folder open tasks.py and change values in variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SETTINGS_FILE_BASE = &amp;#39;Flex-master/docs/pelicanconf.py&amp;#39;
...
&amp;#39;settings_publish&amp;#39;: &amp;#39;Flex-master/docs/publishconf.py&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you will have problems with rendering pages because of CACHE try open another page of site and then return to previous page again. IF you still have problems with CACHE edit pelicanconf.py in theme's folder: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;LOAD_CONTENT_CACHE = False
AUTORELOAD_IGNORE_CACHE = True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can add default pagination count. You need put "0" here to show tags button on the main page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DEFAULT_PAGINATION = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's create static pages in Flex-master/docs/content/pages/ and blog posts in Flex-master/docs/content/articles/ folder. For this task you need install markdown via pip or Sinaptic.&lt;/p&gt;
&lt;p&gt;You can make changes in Flex-master/templates/partial/ folder if you wish or edit base.html file in template folder.&lt;/p&gt;
&lt;p&gt;When you are ready to deploy your site for production change SITEURL in theme's pelicanconf.py from:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SITEURL = &amp;quot;http://localhost:8000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SITEURL = &amp;quot;https://your_site.github.io&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and run again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Push site on github&lt;/h3&gt;
&lt;p&gt;Create repository for your Github Pages on Github. Clone your site folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/yamarik/yamarik.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In cloned folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git init .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see .git folder. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy files in OUTPUT folder of your theme (in Flex-master folder) and paste it into cloned site folder from github. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;your_token&lt;/span&gt;&lt;span class="nv"&gt;@github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yamarik&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yamarik&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You are all done!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note! Since 2022 you need to receive &lt;strong&gt;token instead of login and password&lt;/strong&gt; to push site on github.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Pelican"></category><category term="pelican"></category><category term="linux"></category></entry><entry><title>How to Clone or Backup Linux Disk Using Clonezilla</title><link href="https://yamarik.github.io/linux-disk-backup-using-clonezilla.html" rel="alternate"></link><published>2023-11-19T19:30:00-05:00</published><updated>2023-11-19T19:30:00-05:00</updated><author><name>Olga Maraeva</name></author><id>tag:yamarik.github.io,2023-11-19:/linux-disk-backup-using-clonezilla.html</id><summary type="html">&lt;p&gt;From this tutorial you will learn step by step how to use clonezilla to back up your hard drive.&lt;/p&gt;
&lt;h3&gt;Create clonezilla bootable usb&lt;/h3&gt;
&lt;p&gt;The best way is to boot clonezilla with ventoy.  With ventoy you can create one! bootable USB drive for all! ISO files you want to boot from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From this tutorial you will learn step by step how to use clonezilla to back up your hard drive.&lt;/p&gt;
&lt;h3&gt;Create clonezilla bootable usb&lt;/h3&gt;
&lt;p&gt;The best way is to boot clonezilla with ventoy.  With ventoy you can create one! bootable USB drive for all! ISO files you want to boot from.&lt;/p&gt;
&lt;p&gt;You need download ventoy tool. Open &lt;a href="https://www.ventoy.net/en/download.html"&gt;ventoy download page&lt;/a&gt; and navigate to the latest version. For now it’s &lt;strong&gt;ventoy-1.0.96-linux.tar.gz&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To extract the contents of the Ventoy archive open terminal window and enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Downloads&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xvf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ventoy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Navigate to programm’s folder and run ventoy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd ventoy-1.0.96/
./VentoyGUI.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Install ventoy on flash&lt;/h4&gt;
&lt;p&gt;When the Ventoy GUI application is opened and ready to use, plug your USB flash drive into the computer. The Ventoy GUI tool should then auto-detect your USB flash drive. If no use refresh button. When you will see your usb in the ventoy programm window  click on “Install” button. Agree with partitioning your USB flash and Ventoy will install itself on USB flash drive with secure boot support.&lt;/p&gt;
&lt;p&gt;From now you can copy all .iso file on this usb named “ventoy”, including clonezilla.&lt;/p&gt;
&lt;h3&gt;Use clonezilla&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start you computer and press f9 button.(for your computer boot menu can be opened by different button).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In boot menu select “boot from usb (uefi or bios). I prefer uefi. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In ventoy boot menu select clonezilla. Start programm and wait.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Normal use and troubleshooting.&lt;/h3&gt;
&lt;p&gt;In normal situation you should use clonezilla in “beginner mode” with z9p compression (if your computer is multicore. I think it is). The rest options you can live default. &lt;/p&gt;
&lt;p&gt;But if your SSD or hard disk is corrupted clonezilla usage can be a bit tricky. &lt;/p&gt;
&lt;h4&gt;Clonezilla image is not compressed&lt;/h4&gt;
&lt;p&gt;To check if clonezilla really use compression for you try to save small partition (for example, MBR, sda1). For that select “saveparts” (instead of “savedisk”) and select sda1 (small partition). If clonezilla image of sda1 is compressed it means that you have problems in other blocks.&lt;/p&gt;
&lt;p&gt;Check if empty part of cloning SSD or hard disk disk is actually empty with zerofree programm (zerofree -n). If no you should fill empty part by nulls with zerofree to force  clonezilla use compress methods for whole disk. &lt;/p&gt;
&lt;p&gt;Check if SSD or hard disk have corrupted parts with badblocks programm. In Debian badblocks is located in e2fsprogs package. In case your cloning disk have bad blocks you should select advanced mode in clonezilla (instead of beginner).&lt;/p&gt;
&lt;p&gt;In advanced mode select extra options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c&lt;/li&gt;
&lt;li&gt;j2&lt;/li&gt;
&lt;li&gt;ntfs -ok&lt;/li&gt;
&lt;li&gt;rescue&lt;/li&gt;
&lt;li&gt;q2 (partclone)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When “rescue” option is selected Clonezilla doesn't stop when it reaches a sector error. It simply ignores or bypasses them. If the option isn't selected, CloneZilla will halt and throw a warning message.&lt;/p&gt;</content><category term="Linux"></category><category term="linux"></category></entry></feed>